--- !ruby/object:RI::MethodDescription 
aliases: []

block_params: 
comment: 
- !ruby/struct:SM::Flow::P 
  body: Initialize backup the backup.
- !ruby/struct:SM::Flow::P 
  body: "dstdb:"
- !ruby/struct:SM::Flow::VERB 
  body: "  the destination SQLite3::Database object.\n"
- !ruby/struct:SM::Flow::P 
  body: "dstname:"
- !ruby/struct:SM::Flow::VERB 
  body: "  the destination's database name.\n"
- !ruby/struct:SM::Flow::P 
  body: "srcdb:"
- !ruby/struct:SM::Flow::VERB 
  body: "  the source SQLite3::Database object.\n"
- !ruby/struct:SM::Flow::P 
  body: "srcname:"
- !ruby/struct:SM::Flow::VERB 
  body: "  the source's database name.\n"
- !ruby/struct:SM::Flow::P 
  body: The database name is &quot;main&quot;, &quot;temp&quot;, or the name specified in an ATTACH statement.
- !ruby/struct:SM::Flow::P 
  body: This feature requires SQLite 3.6.11 or later.
- !ruby/struct:SM::Flow::VERB 
  body: "  require 'sqlite3'\n  sdb = SQLite3::Database.new('src.sqlite3')\n\n  ddb = SQLite3::Database.new(':memory:')\n  b = SQLite3::Backup.new(ddb, 'main', sdb, 'main')\n  p [b.remaining, b.pagecount] # invalid value; for example [0, 0]\n  begin\n    p b.step(1) #=&gt; OK or DONE\n    p [b.remaining, b.pagecount]\n  end while b.remaining &gt; 0\n  b.finish\n\n  ddb = SQLite3::Database.new(':memory:')\n  b = SQLite3::Backup.new(ddb, 'main', sdb, 'main')\n  b.step(-1) #=&gt; DONE\n  b.finish\n"
full_name: SQLite3::Backup::new
is_singleton: true
name: new
params: " SQLite3::Backup.new(dstdb, dstname, srcdb, srcname)\n"
visibility: public
